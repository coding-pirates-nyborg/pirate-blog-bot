name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Setup Tailscale
      - name: Tailscale
        uses: tailscale/github-action@v3 
        with:
          oauth-client-id: ${{ vars.TS_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_CLIENT_SECRET }}
          tags: tag:ci
          version: latest
          
      # Wait for Tailscale to be ready
      - name: Wait for Tailscale
        run: sleep 10
        
      # Add server's host key to known_hosts
      - name: Setup SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ vars.SLACK_BOT_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Create .env file
      - name: Create .env file
        run: |
          cat > .env << EOL
          SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}
          BLOG_REPOSITORY=${{ secrets.BLOG_REPOSITORY }}
          GHP_TOKEN=${{ secrets.GHP_TOKEN }}
          EOL
          cat .env # Debug: verify file contents
          
      # Deploy using SSH over Tailscale
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ vars.SSH_USER }}
          SLACK_BOT_HOST: ${{ vars.SLACK_BOT_HOST }}
        run: |
          # Setup SSH key with error handling
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "Error: SSH_PRIVATE_KEY is not set"
            exit 1
          fi
          
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Verify SSH connection
          if ! ssh -q -o BatchMode=yes -o StrictHostKeyChecking=accept-new "$SSH_USER@$SLACK_BOT_HOST" exit; then
            echo "Error: Failed to establish SSH connection"
            exit 1
          fi
          
          # Create directory on remote server
          echo "Creating remote directory..."
          ssh "$SSH_USER@$SLACK_BOT_HOST" 'mkdir -p ~/slack-bot'
          
          # First copy the .env file separately
          echo "Copying .env file..."
          scp .env "$SSH_USER@$SLACK_BOT_HOST:~/slack-bot/.env"
          
          # Then copy the rest of the files
          echo "Copying project files..."
          scp -r ./* "$SSH_USER@$SLACK_BOT_HOST:~/slack-bot/"
          
          # Verify .env file exists and has content
          echo "Verifying .env file..."
          ssh "$SSH_USER@$SLACK_BOT_HOST" 'cat ~/slack-bot/.env'
          
          # Deploy using Docker Compose
          echo "Deploying with Docker Compose..."
          ssh "$SSH_USER@$SLACK_BOT_HOST" bash << 'EOF'
            set -e
            cd ~/slack-bot
            docker compose down || true
            docker compose up -d --build
            docker system prune -f
          EOF
